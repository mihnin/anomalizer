# Имя рабочего процесса, которое будет отображаться в GitHub Actions
name: Python CI/CD to Yandex.Cloud

# Условия запуска: на пуши и pull-реквесты в ветку main
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # Задача №1: Тестирование и проверка качества кода
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # Запускаем тесты на нескольких версиях Python для надежности
        python-version: ["3.9", "3.10"]

    steps:
    # Шаг 1: Клонируем репозиторий
    - name: Check out repository code
      uses: actions/checkout@v4

    # Шаг 2: Настраиваем нужную версию Python
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    # Шаг 3: Устанавливаем все зависимости проекта
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    # Шаг 4: Проверяем код на соответствие стандартам с помощью flake8
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    # Шаг 5: Запускаем тесты с помощью pytest
    - name: Test with pytest
      run: |
        python -m pytest

  # Задача №2: Сборка и развертывание на сервере
  deploy:
    # Эта задача запустится только после успешного завершения задачи 'test'
    needs: test
    runs-on: ubuntu-latest
    # Этот шаг выполняется ТОЛЬКО при пуше в ветку main (не для pull-реквестов)
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    # Шаг 1: Клонируем репозиторий
    - name: Check out repository code
      uses: actions/checkout@v4
      
    # Шаг 2: Логинимся в Yandex Container Registry
    - name: Login to Yandex Container Registry
      uses: docker/login-action@v3
      with:
        registry: cr.yandex
        username: json_key
        # Используем секрет, который вы добавили в GitHub
        password: ${{ secrets.YC_SA_JSON_CREDENTIALS }}

    # Шаг 3: Собираем Docker-образ и загружаем его в Yandex Container Registry
    - name: Build, tag, and push image to Yandex Container Registry
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        # Создаем тег для образа. Пример: cr.yandex/crp.../anomalizer:latest
        tags: cr.yandex/${{ secrets.YC_REGISTRY_ID }}/anomalizer:latest

    # Шаг 4: Подключаемся к вашему серверу в Яндекс.Облаке и разворачиваем контейнер
    - name: Deploy to Yandex.Cloud VM
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.YC_SERVER_IP }}
        username: ${{ secrets.YC_SERVER_USER }}
        key: ${{ secrets.YC_SSH_PRIVATE_KEY }}
        # Скрипт, который будет выполняться на вашем сервере:
        script: |
          # Логинимся в Yandex Container Registry уже на самом сервере
          docker login --username json_key --password '${{ secrets.YC_SA_JSON_CREDENTIALS }}' cr.yandex
          
          # Скачиваем последнюю версию образа из реестра
          docker pull cr.yandex/${{ secrets.YC_REGISTRY_ID }}/anomalizer:latest
          
          # Останавливаем и удаляем старый контейнер (если он есть)
          docker stop anomalizer-v2 || true
          docker rm anomalizer-v2 || true
          
          # Запускаем новый контейнер из свежего образа
          docker run -d --name anomalizer-v2 -p 8505:8505 --restart unless-stopped \
            cr.yandex/${{ secrets.YC_REGISTRY_ID }}/anomalizer:latest
